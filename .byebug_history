exit
continue
hash_csv.first
hash_csv.first['Nível']
hash_csv.first[Nível]
hash_csv.first[nível]
exit
hash_csv.first
hash_csv
exit
hash_csv
exit
decade.uniq
decade
decades
continue
rows
row
decade
continue
decade
name[:res]
name
exit
rows
exit
row
continue
hash
row
continue
row
hash
p
continue
row
p
exit
p
periodos
exit
result.first[:res].find { |a| a[:periodo] == "1930[" }
result.first[:res]
result.first.values
name
names
result.values
result
response
json_response
decades.uniq
decades
exit
decades.uniq
decades
exit
result
heading
rows
exit
result
exit
name
result
result.first
name[:res]
name
decade
name
exit
wxit
decade
result
name[:res]
name
exit
result
exit
EXIT
json_response.first[:res].first[:frequencia]
json_response.first[:res].]
json_response.first[:res].first[:periodo]
json_response.first[:res].first
json_response.first[:res]
json_response.first[:nome]
json_response.first.nome
json_response.first
json_response[0].nome
json_response
json_response.first[:res].first
json_response.first[:res]first
json_response.first[:res]
json_response.first
json_response
exit
json_response
names
exit
response
names
exit
continue
response
exit
names.gsub(',','%7C').gsub(/\s+/, "")
names
json_response
exit
names.gsub(',','%7C').gsub(/\s+/,"")
names.gsub(',','%7C')
json_response
json_respnse
names
continue
exit
state
exit
state
continue
exit
names.first[:ranking]
names.first.ranking
names.each do |n|
names.first
names.nome
names
state
continue
state.location_id
state
uf
exit
uf
state
continue
State.find_by(location_id: 12)
City.all
State.all
continue
CONTINUE
continue
exit
json_response[0][:res].first[:nome]
json_response[0][:res].first[:nome}
json_response[0][:res].first.nome
json_response[0][:res].first
json_response[0][:res][0]
json_response[0][:res]
json_response[0][:res][:nome]
json_response[0][:res]
json_response[0]
json_response[0][0]
json_response[0][res]
json_response[1]
json_response.res[1]
json_response[:res][0]
json_response[:res]
json_response[res]
json_response.res
json_response
exit
s.cities.count
s.cities.city
s.cities
s.city
s.uf
s = State.find(1)
s = State.find(id: 1)
State.all
exit
City.all
State.all
State.count
City.count
exit
state_table
exit
states
exit
cities
continue
cities
exit
cities
exit
cities
exit
cities
ciites
exit
states
json_response
exit
cities
json_response
exit
json_response
exit
json_response
exit
json_response
exit
states
exit
cities
